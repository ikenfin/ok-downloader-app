#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ok-photos:server');
var http = require('http');

const socketHandlers = require('../socket');
const socketio = require('socket.io');
const socketioAuth = require('socketio-auth');

const socketHelpers = require('../helpers/socket');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketio(server, {
  path: '/socket'
});

socketioAuth(io, {
  authenticate (socket, jwt, callback) {
    app.get('jwt').verify(jwt)
      .then(result => {
        callback(false, result.id)
      })
      .catch(err => {
        callback(new Error(err))
      })
  },
  postAuthenticate (client, jwt) {
    const helpers = socketHelpers(app, client)

    client.jwt = jwt
    app.get('jwt').verifyExists(jwt)
      .then(([data, exists]) => {
        // if (!exists) {
        //   helpers.logout(data.id)
        // }
        // else {
        client.join(`user:${data.id}`)
        client.authData = data
        // }
      })
  }
})

io.sockets.on('connection', client => {
  socketHandlers(app, client);
});

app.set('socket.io', io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
